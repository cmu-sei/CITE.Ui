/*
Copyright 2022 Carnegie Mellon University. All Rights Reserved.
 Released under a MIT (SEI)-style license. See LICENSE.md in the
// project root for license information.
*/

/**
 * Cite API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { ProblemDetails } from '../model/problemDetails';
import { Submission } from '../model/submission';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable({
  providedIn: 'root'
})
export class SubmissionService {

    protected basePath = 'http://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {

        if (configuration) {
            this.configuration = configuration;
            this.configuration.basePath = configuration.basePath || basePath || this.basePath;

        } else {
            this.configuration.basePath = basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Clears Submission Selections
     * Updates a Submission to no selections.  &lt;para /&gt;
     * @param id The Id of the Submission to update
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public clearSubmission(id: string, observe?: 'body', reportProgress?: boolean): Observable<Submission>;
    public clearSubmission(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Submission>>;
    public clearSubmission(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Submission>>;
    public clearSubmission(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling clearSubmission.');
        }

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.put<Submission>(`${this.configuration.basePath}/api/submissions/${encodeURIComponent(String(id))}/clear`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates a new Submission
     * Creates a new Submission with the attributes specified  &lt;para /&gt;  Accessible only to a ContentDeveloper or an Administrator
     * @param Submission The data used to create the Submission
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createSubmission(Submission?: Submission, observe?: 'body', reportProgress?: boolean): Observable<Submission>;
    public createSubmission(Submission?: Submission, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Submission>>;
    public createSubmission(Submission?: Submission, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Submission>>;
    public createSubmission(Submission?: Submission, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Submission>(`${this.configuration.basePath}/api/submissions`,
            Submission,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Deletes a  Submission
     * Deletes a  Submission with the specified id  &lt;para /&gt;  Accessible only to a ContentDeveloper or an Administrator
     * @param id The id of the Submission to delete
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteSubmission(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteSubmission(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteSubmission(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteSubmission(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteSubmission.');
        }

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.configuration.basePath}/api/submissions/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Fills in the details for a team average submission
     * Fills in the categories, options and comments for the team average submission
     * @param Submission The team average Submission needing details
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public fillTeamAverageSubmission(Submission?: Submission, observe?: 'body', reportProgress?: boolean): Observable<Submission>;
    public fillTeamAverageSubmission(Submission?: Submission, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Submission>>;
    public fillTeamAverageSubmission(Submission?: Submission, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Submission>>;
    public fillTeamAverageSubmission(Submission?: Submission, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<Submission>(`${this.configuration.basePath}/api/submissions/teamavg`,
            Submission,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Fills in the details for a teamType average submission
     * Fills in the categories, options and comments for the teamType average submission
     * @param Submission The teamType average Submission needing details
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public fillTeamTypeAverageSubmission(Submission?: Submission, observe?: 'body', reportProgress?: boolean): Observable<Submission>;
    public fillTeamTypeAverageSubmission(Submission?: Submission, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Submission>>;
    public fillTeamTypeAverageSubmission(Submission?: Submission, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Submission>>;
    public fillTeamTypeAverageSubmission(Submission?: Submission, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<Submission>(`${this.configuration.basePath}/api/submissions/teamtypeavg`,
            Submission,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets Submissions by evaluation team
     * Returns a list of Submissions for the evaluation team specified.
     * @param evaluationId
     * @param teamId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getByEvaluationTeam(evaluationId: string, teamId: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Submission>>;
    public getByEvaluationTeam(evaluationId: string, teamId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Submission>>>;
    public getByEvaluationTeam(evaluationId: string, teamId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Submission>>>;
    public getByEvaluationTeam(evaluationId: string, teamId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (evaluationId === null || evaluationId === undefined) {
            throw new Error('Required parameter evaluationId was null or undefined when calling getMineByEvaluation.');
        }

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Submission>>(`${this.configuration.basePath}/api/evaluations/${encodeURIComponent(String(evaluationId))}/teams/${encodeURIComponent(String(teamId))}/submissions`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets Submissions by evaluation for current user
     * Returns a list of Submissions for the evaluation for the current user.
     * @param evaluationId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getMineByEvaluation(evaluationId: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Submission>>;
    public getMineByEvaluation(evaluationId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Submission>>>;
    public getMineByEvaluation(evaluationId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Submission>>>;
    public getMineByEvaluation(evaluationId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (evaluationId === null || evaluationId === undefined) {
            throw new Error('Required parameter evaluationId was null or undefined when calling getMineByEvaluation.');
        }

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Submission>>(`${this.configuration.basePath}/api/evaluations/${encodeURIComponent(String(evaluationId))}/my-submissions`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a specific Submission by id
     * Returns the Submission with the id specified
     * @param id The id of the Submission
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSubmission(id: string, observe?: 'body', reportProgress?: boolean): Observable<Submission>;
    public getSubmission(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Submission>>;
    public getSubmission(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Submission>>;
    public getSubmission(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getSubmission.');
        }

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Submission>(`${this.configuration.basePath}/api/submissions/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets Submissions
     * Returns a list of Submissions.
     * @param EvaluationId Whether or not to return records only for a designated user
     * @param ScoringModelId Whether or not to return records only for a designated user
     * @param UserId Whether or not to return records only for a designated user
     * @param TeamId Whether or not to return records only for a designated team
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSubmissions(EvaluationId?: string, ScoringModelId?: string, UserId?: string, TeamId?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Submission>>;
    public getSubmissions(EvaluationId?: string, ScoringModelId?: string, UserId?: string, TeamId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Submission>>>;
    public getSubmissions(EvaluationId?: string, ScoringModelId?: string, UserId?: string, TeamId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Submission>>>;
    public getSubmissions(EvaluationId?: string, ScoringModelId?: string, UserId?: string, TeamId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (EvaluationId !== undefined && EvaluationId !== null) {
            queryParameters = queryParameters.set('EvaluationId', <any>EvaluationId);
        }
        if (ScoringModelId !== undefined && ScoringModelId !== null) {
            queryParameters = queryParameters.set('ScoringModelId', <any>ScoringModelId);
        }
        if (UserId !== undefined && UserId !== null) {
            queryParameters = queryParameters.set('UserId', <any>UserId);
        }
        if (TeamId !== undefined && TeamId !== null) {
            queryParameters = queryParameters.set('TeamId', <any>TeamId);
        }

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Submission>>(`${this.configuration.basePath}/api/submissions`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Presets Submission Selections to previous move values
     * Updates a Submission to previous move submission selections.  &lt;para /&gt;
     * @param id The Id of the Submission to update
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public presetSubmission(id: string, observe?: 'body', reportProgress?: boolean): Observable<Submission>;
    public presetSubmission(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Submission>>;
    public presetSubmission(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Submission>>;
    public presetSubmission(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling presetSubmission.');
        }

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.put<Submission>(`${this.configuration.basePath}/api/submissions/${encodeURIComponent(String(id))}/preset`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates a  Submission
     * Updates a Submission with the attributes specified.  The ID from the route MUST MATCH the ID contained in the submission parameter  &lt;para /&gt;  Accessible only to a ContentDeveloper or an Administrator
     * @param id The Id of the Submission to update
     * @param Submission The updated Submission values
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateSubmission(id: string, Submission?: Submission, observe?: 'body', reportProgress?: boolean): Observable<Submission>;
    public updateSubmission(id: string, Submission?: Submission, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Submission>>;
    public updateSubmission(id: string, Submission?: Submission, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Submission>>;
    public updateSubmission(id: string, Submission?: Submission, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateSubmission.');
        }

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<Submission>(`${this.configuration.basePath}/api/submissions/${encodeURIComponent(String(id))}`,
            Submission,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
